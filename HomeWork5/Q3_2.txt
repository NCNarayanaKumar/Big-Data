
2) val lines = sc.textFile("hdfs://localhost:9000/h5/ratings")


val movies = lines.filter(line => line.split("::")(0).equals("1")).filter(line => line.split("::")(2).equals("4")).map(line =>line.split("::")(1)).collect

3) val sim = sc.textFile("hdfs://localhost:9000/h5/imat")


def format(x: String):String = { 
	var ax:Array[String]= x.split(",")
        var len = ax.length
		
	var s:String = ""
	if(len>1){
		for (i <- 0 to (ax.length-1)) if(i%2==0){s=s.concat(ax(i))
						s=s.concat(",")
						}
	} 
	else{ s=ax(0) 
	s=s.concat(",")
	}
	        
	return s.dropRight(1)
	
}



def matchMovies(x: String, ar:Array[String]):String = { 
	var f:String = x.split("\t")(0);
	
	var s:String = ""
	for(a <- ar){
		if(f.equals(a)) s= x
		
	}
	return s
}


val re_lines = sim.map(x => x.replace(":",",")).map(x => format(x)).map(x => matchMovies(x,movies)).filter(x => x.size > 0).foreach(println)




4) val mfile = sc.textFile("hdfs://localhost:9000/h5/movies")
val mv = mfile.collect()



def replaceByName(movieId:String, mvr: Array[String]):String = {
	var ids:Array[String] = movieId.split(",")
	var re:Array[String]  = new Array[String](ids.length)
			for(i <- 0 to (ids.length-1)){
		
			val moviename = mvr.filter(x => x.split("::")(0).equals(ids(i))).map(x=>(x.split("::")(1)))
			re(i)=moviename(0)
                         		
			}

			var s:String = ""
			for(i <- 0 to (re.length-1)){
				s=s.concat(re(i))
				if(i==0) s=s.concat("\t")
				else s=s.concat(",")
				
			}
	
	return s.dropRight(1) 

}

val finalresult = re_lines.map(x=> replaceByName(x.replace("\t",","), mv)).foreach(println);